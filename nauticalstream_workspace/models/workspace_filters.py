# coding: utf-8

"""
    NauticalStream | workspace-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nauticalstream_workspace.models.b_box import BBox
from nauticalstream_workspace.models.lat_lng import LatLng
from nauticalstream_workspace.models.workspace_status import WorkspaceStatus
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceFilters(BaseModel):
    """
    WorkspaceFilters
    """ # noqa: E501
    status: Optional[WorkspaceStatus] = None
    name: Optional[StrictStr] = None
    created_by: Optional[StrictStr] = None
    created_after: Optional[datetime] = None
    created_before: Optional[datetime] = None
    google_place_id: Optional[StrictStr] = None
    bbox: Optional[BBox] = None
    radius_m: Optional[StrictInt] = None
    location: Optional[LatLng] = None
    __properties: ClassVar[List[str]] = ["status", "name", "created_by", "created_after", "created_before", "google_place_id", "bbox", "radius_m", "location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bbox
        if self.bbox:
            _dict['bbox'] = self.bbox.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['created_by'] = None

        # set to None if created_after (nullable) is None
        # and model_fields_set contains the field
        if self.created_after is None and "created_after" in self.model_fields_set:
            _dict['created_after'] = None

        # set to None if created_before (nullable) is None
        # and model_fields_set contains the field
        if self.created_before is None and "created_before" in self.model_fields_set:
            _dict['created_before'] = None

        # set to None if google_place_id (nullable) is None
        # and model_fields_set contains the field
        if self.google_place_id is None and "google_place_id" in self.model_fields_set:
            _dict['google_place_id'] = None

        # set to None if bbox (nullable) is None
        # and model_fields_set contains the field
        if self.bbox is None and "bbox" in self.model_fields_set:
            _dict['bbox'] = None

        # set to None if radius_m (nullable) is None
        # and model_fields_set contains the field
        if self.radius_m is None and "radius_m" in self.model_fields_set:
            _dict['radius_m'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "name": obj.get("name"),
            "created_by": obj.get("created_by"),
            "created_after": obj.get("created_after"),
            "created_before": obj.get("created_before"),
            "google_place_id": obj.get("google_place_id"),
            "bbox": BBox.from_dict(obj["bbox"]) if obj.get("bbox") is not None else None,
            "radius_m": obj.get("radius_m"),
            "location": LatLng.from_dict(obj["location"]) if obj.get("location") is not None else None
        })
        return _obj



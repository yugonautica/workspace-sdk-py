# coding: utf-8

"""
    NauticalStream | workspace-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from nauticalstream_workspace.models.feature import Feature
from typing import Optional, Set
from typing_extensions import Self

class GetFeaturesBatchResponse(BaseModel):
    """
    GetFeaturesBatchResponse
    """ # noqa: E501
    ids: Optional[Dict[str, Feature]] = None
    workspace_ids: Optional[Dict[str, List[Feature]]] = None
    amenity_ids: Optional[Dict[str, List[Feature]]] = None
    __properties: ClassVar[List[str]] = ["ids", "workspace_ids", "amenity_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetFeaturesBatchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in ids (dict)
        _field_dict = {}
        if self.ids:
            for _key_ids in self.ids:
                if self.ids[_key_ids]:
                    _field_dict[_key_ids] = self.ids[_key_ids].to_dict()
            _dict['ids'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in workspace_ids (dict of array)
        _field_dict_of_array = {}
        if self.workspace_ids:
            for _key_workspace_ids in self.workspace_ids:
                if self.workspace_ids[_key_workspace_ids] is not None:
                    _field_dict_of_array[_key_workspace_ids] = [
                        _item.to_dict() for _item in self.workspace_ids[_key_workspace_ids]
                    ]
            _dict['workspace_ids'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each value in amenity_ids (dict of array)
        _field_dict_of_array = {}
        if self.amenity_ids:
            for _key_amenity_ids in self.amenity_ids:
                if self.amenity_ids[_key_amenity_ids] is not None:
                    _field_dict_of_array[_key_amenity_ids] = [
                        _item.to_dict() for _item in self.amenity_ids[_key_amenity_ids]
                    ]
            _dict['amenity_ids'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetFeaturesBatchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ids": dict(
                (_k, Feature.from_dict(_v))
                for _k, _v in obj["ids"].items()
            )
            if obj.get("ids") is not None
            else None,
            "workspace_ids": dict(
                (_k,
                        [Feature.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("workspace_ids", {}).items()
            ),
            "amenity_ids": dict(
                (_k,
                        [Feature.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("amenity_ids", {}).items()
            )
        })
        return _obj



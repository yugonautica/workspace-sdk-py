# coding: utf-8

"""
    NauticalStream | workspace-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from nauticalstream_workspace.models.point import Point
from nauticalstream_workspace.models.workspace_status import WorkspaceStatus
from nauticalstream_workspace.models.workspace_type import WorkspaceType
from typing import Optional, Set
from typing_extensions import Self

class Workspace(BaseModel):
    """
    Workspace
    """ # noqa: E501
    id: StrictInt
    status: Optional[WorkspaceStatus] = None
    created_by: UUID
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    deleted_by: Optional[UUID] = None
    type: Optional[WorkspaceType] = None
    name: StrictStr
    handle: StrictStr
    description: Optional[StrictStr] = None
    category_id: StrictInt
    formatted_address: Optional[StrictStr] = None
    avatar_id: Optional[UUID] = None
    cover_id: Optional[UUID] = None
    location: Optional[Point] = None
    __properties: ClassVar[List[str]] = ["id", "status", "created_by", "created_at", "updated_at", "deleted_at", "deleted_by", "type", "name", "handle", "description", "category_id", "formatted_address", "avatar_id", "cover_id", "location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if deleted_by (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_by is None and "deleted_by" in self.model_fields_set:
            _dict['deleted_by'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if formatted_address (nullable) is None
        # and model_fields_set contains the field
        if self.formatted_address is None and "formatted_address" in self.model_fields_set:
            _dict['formatted_address'] = None

        # set to None if avatar_id (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_id is None and "avatar_id" in self.model_fields_set:
            _dict['avatar_id'] = None

        # set to None if cover_id (nullable) is None
        # and model_fields_set contains the field
        if self.cover_id is None and "cover_id" in self.model_fields_set:
            _dict['cover_id'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "created_by": obj.get("created_by"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "deleted_by": obj.get("deleted_by"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "handle": obj.get("handle"),
            "description": obj.get("description"),
            "category_id": obj.get("category_id"),
            "formatted_address": obj.get("formatted_address"),
            "avatar_id": obj.get("avatar_id"),
            "cover_id": obj.get("cover_id"),
            "location": Point.from_dict(obj["location"]) if obj.get("location") is not None else None
        })
        return _obj


